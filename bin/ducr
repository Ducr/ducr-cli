#! /usr/bin/env node

const { chalk, commander, minimist } = require('../libs/tools/module')
const packageData = require('../package.json')
const log = console.log

// 当前cli的名称
const cliName = packageData.name

log(chalk.yellowBright.bold(`👏 welcome to use ${cliName}👏`))

/**
 * 参数的格式化方法，配合minimist处理输出键值对参数
 * @param { object } cmd 当前命令行中的命令数据
 */
const handleArgs = (cmd = {}) => {
  // 命令行传参的数组，格式为：[ 'create', 'demo', '-o', 'Ducr', '-r', 'ducr-template' ]
  // 需处理为 [ 'create', 'demo', '--owner', 'Ducr', '--repository', 'ducr-template' ]
  let argvList = process.argv.splice(2) || []
  const { options } = cmd
  options.forEach(opt => {
    argvList = argvList.map(argv => {
      let newArgv = argv
      if (opt.short === argv || opt.long === argv) {
        newArgv = opt.long
      }
      return newArgv
    })
  })
  return minimist(argvList)
}

// 创建create命令 并进行操作
commander.command('create <app-name>')
  .description("create a new project")
  .option("-f,--force", 'overwrite target if it exists') // 一些参数配置及简写形式
  .option("-o,--owner", 'overwrite target if it exists') // owner参数配置及简写形式
  .option("-r,--repository", 'overwrite target if it exists') // repository参数配置及简写形式
  .action((name, cmd) => { // 输入正确命令之后的操作，name 是命令，cmd 是参数
    if (!name) {
      log(chalk.red("please write project name"))
      return
    }
    require('../libs/command/create.js')(name, handleArgs(cmd))
  })

// ducr-cli 的版本信息
commander
  .version(`${cliName}@${packageData.version}`)
  .usage('<command> [option]')

// 在 --help 的时候进行调整
commander.on('--help', () => {
  log(`Run ${chalk.red(`${cliName} <command> --help`)} show details`)
})

// 解析用户执行命令时候传入的参数，根据参数进行配置 
commander.parse(process.argv)

if (!commander.args.length) {
  commander.help()
}
